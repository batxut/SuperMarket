<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    version="2.5">	
    <display-name>超级市场</display-name>
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.properties</param-value>
	</context-param>
	
	
	<context-param>  
        <param-name>webAppRootKey</param-name>  
        <param-value>webapp.root1</param-value>  
    </context-param> 
	
		<!-- 监听Log4j装载器 -->
	<listener>
		<listener-class>
			org.springframework.web.util.Log4jConfigListener
		</listener-class>
	</listener>
	
	<!--
		Spring ApplicationContext配置文件的路径,可使用通配符,多个路径用,号分隔 此参数用于后面的Spring
		Context Loader
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
 		 classpath:applicationContext*.xml,
  		</param-value>
	</context-param>
	<!-- hibernate session管理过滤器 -->
	<filter>
		<filter-name>hibernateFilter</filter-name>
		<filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
	</filter>
	<!-- 使用Spring中的过滤器解决在请求和应答中的中文乱码问题 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>com.love.common.SetCharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<!--强制转换编码(request和response均适用) -->
			<param-name>ForceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


    <!-- 定义ActionContextCleanUp过滤器 -->
	<filter>
		<filter-name>StrutsPrepareFilter</filter-name>
		<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>StrutsPrepareFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>



	<!-- 定义Struts2核心过滤器 -->
	<!-- 以下配置Struts2的过滤器，用于拦截指定的web请求，交给Struts2框架去处理 -->
		<filter>
		<filter-name>StrutsExecuteFilter</filter-name>
        <filter-class>
        	org.apache.struts2.dispatcher.ng.filter.StrutsExecuteFilter
        </filter-class>   
<!--		<init-param>-->
<!--		<param-name>config</param-name>-->
<!--			<param-value>-->
<!--				/WEB-INF/struts-context/struts_admin.xml-->
<!--			</param-value>-->
<!--		</init-param>-->
		</filter>
	<filter-mapping>
		<filter-name>StrutsExecuteFilter</filter-name>
		<url-pattern>*.action</url-pattern>
	</filter-mapping>
	<!-- 使JSP页支持使用STRUTS标签 -->
	<filter-mapping> 
		<filter-name>StrutsExecuteFilter</filter-name> 
		<url-pattern>*.jsp</url-pattern> 
	</filter-mapping>

	<!--spring监听器的配置，用于在启动Web容器时，自动装配ApplicationContext的配置信息-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Spring刷新Interceptor防止内存泄漏  -->
	<listener>
		<listener-class>
			org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	
	
<!--
		设置session 超时:
		session-config元素为Web应用中的javax.servlet.http.HttpSession对象定义参数。
		session-timeout元素用来指定默认的会话超时时间间隔，以分钟为单位。该元素值必须为整数。
		如果session-timeout元素的值为零或负数，则表示会话将永远不会超时。
		下面是一个部署描述符，在用户最近访问HttpSession对象20分钟后，HttpSession对象默认为无效。
	-->
	<session-config>
		<session-timeout>20</session-timeout>
	</session-config>
	

	<welcome-file-list>
		<welcome-file>/index.jsp</welcome-file>
	</welcome-file-list>
</web-app>